import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";

const DeviceBorrowingSystem = () => {
  // ... (previous imports and initial state remain the same) ...

  const [currentWeek, setCurrentWeek] = useState(1);
  const [selectedRoom, setSelectedRoom] = useState('ipad');
  const [isAdmin, setIsAdmin] = useState(false);
  const [showLogin, setShowLogin] = useState(false);
  const [loginDetails, setLoginDetails] = useState({ username: '', password: '' });

  // 借用者名單
  const borrowers = [
    "黃美玲", "李靜汝", "田慧晶", "江佳容", "林怡彣", "李立德", "李雯琪", 
    "張心怡", "洪錦男", "許志豪", "林明輝", "林淑楨", "林秀貞", "黃綉媛",
    "王耀賢", "莊雅如", "陳怡妏", "陳育德", "蕭慧純", "李蕎至", "蔡呈熙",
    "李宜芳", "鄧伊芳", "曾柏蓉", "魏俊益", "崔愉雯", "徐錫穎", "張茱貽",
    "張智鈞", "洪振民", "蔡怡君", "林佳蓉", "張瀞云", "陳立崗", "徐嘉禧",
    "楊海萍", "鍾菁菁", "吳政翰", "林明德", "許淑智", "唐瑄", "曾怡儒",
    "張麗娟", "蘇琮筆", "Kristine Can"
  ];

  const [schedule, setSchedule] = useState({
    ipad: {},
    chromebook: {}
  });

  const [weeklyBlocked, setWeeklyBlocked] = useState({
    ipad: {},
    chromebook: {}
  });

  const getWeekDates = (weekNumber) => {
    const startDate = new Date(2025, 0, 1);
    const firstDay = startDate.getDay();
    const daysToAdd = (weekNumber - 1) * 7 - firstDay + 1;
    const weekStart = new Date(startDate);
    weekStart.setDate(startDate.getDate() + daysToAdd);
    
    return Array.from({ length: 6 }).map((_, index) => {
      const date = new Date(weekStart);
      date.setDate(weekStart.getDate() + index);
      return `${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')}`;
    });
  };

  const handleLogin = () => {
    if (loginDetails.username === '114' && loginDetails.password === '114') {
      setIsAdmin(true);
      setShowLogin(false);
    }
  };

  const updateSchedule = (week, day, period, value) => {
    if (!isAdmin) return;
    
    if (value === 'weekly-blocked') {
      setWeeklyBlocked(prev => ({
        ...prev,
        [selectedRoom]: {
          ...prev[selectedRoom],
          [`${day}-${period}`]: true
        }
      }));
    } else {
      if (weeklyBlocked[selectedRoom]?.[`${day}-${period}`]) {
        setWeeklyBlocked(prev => ({
          ...prev,
          [selectedRoom]: {
            ...prev[selectedRoom],
            [`${day}-${period}`]: false
          }
        }));
      }
      
      setSchedule(prev => ({
        ...prev,
        [selectedRoom]: {
          ...prev[selectedRoom],
          [week]: {
            ...prev[selectedRoom]?.[week],
            [`${day}-${period}`]: value
          }
        }
      }));
    }
  };

  const getCellValue = (week, day, period) => {
    if (weeklyBlocked[selectedRoom]?.[`${day}-${period}`]) {
      return 'weekly-blocked';
    }
    return schedule[selectedRoom]?.[week]?.[`${day}-${period}`] || 'available';
  };

  const getDisplayValue = (value) => {
    switch(value) {
      case 'available':
        return '可借用';
      case 'blocked':
        return '不可借用';
      case 'weekly-blocked':
        return '每週皆不可借用';
      case null:
      case undefined:
        return '可借用';
      default:
        return value;
    }
  };

  return (
    <div className="min-h-screen bg-blue-50">
      <div className="container mx-auto p-4">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-blue-800">營北國中載具借用系統</h1>
          <Button 
            onClick={() => setShowLogin(true)}
            className="bg-blue-600 hover:bg-blue-700 text-white"
          >
            管理者登入
          </Button>
        </div>

        <div className="grid gap-4 mb-6">
          <Select value={selectedRoom} onValueChange={setSelectedRoom}>
            <SelectTrigger>
              <SelectValue placeholder="選擇教室" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="ipad">iPad教室</SelectItem>
              <SelectItem value="chromebook">Chromebook教室</SelectItem>
            </SelectContent>
          </Select>

          <Select value={currentWeek.toString()} onValueChange={(v) => setCurrentWeek(parseInt(v))}>
            <SelectTrigger>
              <SelectValue placeholder="選擇週次" />
            </SelectTrigger>
            <SelectContent>
              {Array.from({ length: 52 }).map((_, i) => (
                <SelectItem key={i + 1} value={(i + 1).toString()}>
                  第{i + 1}週 ({getWeekDates(i + 1)[0]}-{getWeekDates(i + 1)[5]})
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>
              {selectedRoom === 'ipad' ? 'iPad教室' : 'Chromebook教室'} - 第{currentWeek}週借用狀況
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr>
                    <th className="border p-2 bg-blue-100">節次</th>
                    {getWeekDates(currentWeek).map((date, i) => (
                      <th key={i} className="border p-2 bg-blue-100">
                        {['一', '二', '三', '四', '五', '六'][i]}({date})
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {Array.from({ length: 8 }).map((_, period) => (
                    <tr key={period}>
                      <td className="border p-2 bg-blue-50 text-center">{period + 1}</td>
                      {Array.from({ length: 6 }).map((_, day) => {
                        const cellValue = getCellValue(currentWeek, day, period);
                        return (
                          <td key={day} className="border p-2">
                            {isAdmin ? (
                              <Select
                                value={cellValue}
                                onValueChange={(value) => updateSchedule(currentWeek, day, period, value)}
                              >
                                <SelectTrigger>
                                  <SelectValue>
                                    {getDisplayValue(cellValue)}
                                  </SelectValue>
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="available">可借用</SelectItem>
                                  <SelectItem value="blocked">單節不可借用</SelectItem>
                                  <SelectItem value="weekly-blocked">每週皆不可借用</SelectItem>
                                  <SelectItem value="divider" disabled>
                                    ───── 借用者名單 ─────
                                  </SelectItem>
                                  {borrowers.map((borrower) => (
                                    <SelectItem key={borrower} value={borrower}>
                                      {borrower}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            ) : (
                              <div className={`min-h-[2rem] flex items-center justify-center ${
                                cellValue === 'blocked' || cellValue === 'weekly-blocked' 
                                  ? 'bg-gray-200' 
                                  : ''
                              }`}>
                                {getDisplayValue(cellValue)}
                              </div>
                            )}
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>

        <Dialog open={showLogin} onOpenChange={setShowLogin}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>管理者登入</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <Input
                placeholder="帳號"
                value={loginDetails.username}
                onChange={(e) => setLoginDetails(prev => ({ ...prev, username: e.target.value }))}
              />
              <Input
                type="password"
                placeholder="密碼"
                value={loginDetails.password}
                onChange={(e) => setLoginDetails(prev => ({ ...prev, password: e.target.value }))}
              />
              <Button onClick={handleLogin}>登入</Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
};

export default DeviceBorrowingSystem;
